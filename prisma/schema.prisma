generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Musician {
  id                Int                     @id @default(autoincrement())
  musicianId        String                  @unique @default(cuid())
  firstName         String
  lastName          String
  email             String                  @unique
  phone             String?
  preferredLanguage String?                 @default("sv")
  localResidence    Boolean                 @default(false)
  notes             String?                 @db.Text
  isActive          Boolean                 @default(true)
  isArchived        Boolean                 @default(false)
  archivedAt        DateTime?
  restoredAt        DateTime?
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  qualifications    MusicianQualification[]
  rankings          Ranking[]
  requests          Request[]
}

model Instrument {
  id           Int        @id @default(autoincrement())
  instrumentId String     @unique @default(cuid())
  name         String     @unique
  displayOrder Int?
  isArchived   Boolean    @default(false)
  archivedAt   DateTime?
  positions    Position[]
}

model Position {
  id             Int                     @id @default(autoincrement())
  positionId     String                  @unique @default(cuid())
  instrumentId   Int
  name           String
  hierarchyLevel Int
  qualifications MusicianQualification[]
  instrument     Instrument              @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  projectNeeds   ProjectNeed[]
  rankingLists   RankingList[]

  @@unique([instrumentId, name])
}

model MusicianQualification {
  musicianId Int
  positionId Int
  musician   Musician @relation(fields: [musicianId], references: [id])
  position   Position @relation(fields: [positionId], references: [id])

  @@id([musicianId, positionId])
}

model RankingList {
  id            Int           @id @default(autoincrement())
  rankingListId String        @unique @default(cuid())
  positionId    Int
  listType      String
  description   String?
  version       Int           @default(1)
  projectNeeds  ProjectNeed[]
  rankings      Ranking[]
  position      Position      @relation(fields: [positionId], references: [id], onDelete: Cascade)

  @@unique([positionId, listType])
}

model Ranking {
  id          Int         @id @default(autoincrement())
  rankingId   String      @unique @default(cuid())
  listId      Int
  musicianId  Int
  rank        Int
  rankingList RankingList @relation(fields: [listId], references: [id], onDelete: Cascade)
  musician    Musician    @relation(fields: [musicianId], references: [id])

  @@unique([listId, musicianId])
  @@unique([listId, rank])
}

model Project {
  id                Int             @id @default(autoincrement())
  projectId         String          @unique @default(cuid())
  name              String
  startDate         DateTime
  weekNumber        Int
  rehearsalSchedule String?
  concertInfo       String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  notes             String?
  projectFiles      ProjectFile[]
  projectNeeds      ProjectNeed[]
  groupEmailLogs    GroupEmailLog[]
  fileStorage       FileStorage[]
}

model ProjectNeed {
  id                    Int           @id @default(autoincrement())
  projectNeedId         String        @unique @default(cuid())
  projectId             Int
  positionId            Int
  quantity              Int           @default(1)
  rankingListId         Int
  requestStrategy       String
  maxRecipients         Int?
  responseTimeHours     Int?          @default(24)
  requireLocalResidence Boolean       @default(false)
  archivedAt            DateTime?
  status                String        @default("active")
  projectFiles          ProjectFile[]
  position              Position      @relation(fields: [positionId], references: [id], onDelete: Cascade)
  project               Project       @relation(fields: [projectId], references: [id])
  rankingList           RankingList   @relation(fields: [rankingListId], references: [id], onDelete: Cascade)
  requests              Request[]
}

model Request {
  id                Int                @id @default(autoincrement())
  requestId         String             @unique @default(cuid())
  projectNeedId     Int
  musicianId        Int
  status            String             @default("pending")
  sentAt            DateTime           @default(now())
  reminderSentAt    DateTime?
  respondedAt       DateTime?
  response          String?
  confirmationSent  Boolean            @default(false)
  communicationLogs CommunicationLog[]
  musician          Musician           @relation(fields: [musicianId], references: [id])
  projectNeed       ProjectNeed        @relation(fields: [projectNeedId], references: [id], onDelete: Cascade)
  requestTokens     RequestToken[]
}

model RequestToken {
  token     String    @id @default(cuid())
  requestId Int
  createdAt DateTime  @default(now())
  expiresAt DateTime
  usedAt    DateTime?
  request   Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model EmailTemplate {
  id              Int      @id @default(autoincrement())
  emailTemplateId String   @unique @default(cuid())
  type            String   @unique
  subject         String
  body            String
  variables       Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model CommunicationLog {
  id                 Int      @id @default(autoincrement())
  communicationLogId String   @unique @default(cuid())
  requestId          Int
  type               String
  timestamp          DateTime @default(now())
  emailContent       String?
  request            Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model ProjectFile {
  id               Int          @id @default(autoincrement())
  projectFileId    String       @unique @default(cuid())
  projectId        Int
  fileName         String
  originalFileName String? // New: peter.pdf
  mimeType         String? // New: application/pdf
  fileUrl          String
  fileType         String
  uploadedAt       DateTime     @default(now())
  projectNeedId    Int?
  sendTiming       String       @default("on_request")
  project          Project      @relation(fields: [projectId], references: [id])
  projectNeed      ProjectNeed? @relation(fields: [projectNeedId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  auditLogId String   @unique @default(cuid())
  userId     String?
  action     String
  entityType String
  entityId   Int
  oldValues  Json?
  newValues  Json?
  timestamp  DateTime @default(now())

  @@index([entityType, entityId])
  @@index([timestamp])
}

model IdSequence {
  id         Int      @id @default(autoincrement())
  entityType String   @unique
  lastNumber Int      @default(0)
  updatedAt  DateTime @updatedAt
}

model DeletedIds {
  id         Int      @id @default(autoincrement())
  entityType String
  deletedId  String
  deletedAt  DateTime @default(now())

  @@unique([entityType, deletedId])
  @@index([entityType])
}

model Settings {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GroupEmailLog {
  id          Int      @id @default(autoincrement())
  projectId   Int?
  subject     String
  message     String
  recipients  Json // Array of {email, name}
  sentCount   Int
  failedCount Int
  filters     Json? // {instruments: [], positions: []}
  createdAt   DateTime @default(now())
  project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
}

model Customer {
  id           String   @id @default(cuid())
  name         String
  subdomain    String   @unique
  databaseUrl  String
  status       String   @default("active") // active, inactive, pending
  contactEmail String
  plan         String   @default("small") // small, medium, enterprise
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Orchestra {
  id           String   @id @default(cuid())
  name         String
  subdomain    String   @unique
  contactName  String
  contactEmail String
  databaseUrl  String?
  status       String   @default("pending") // pending, active, inactive
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  users        User[]
}

model FileStorage {
  id           String   @id @default(cuid())
  fileName     String
  originalName String
  mimeType     String
  size         Int
  content      Bytes // Store file content as binary
  projectId    Int?
  needId       Int?
  createdAt    DateTime @default(now())
  project      Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  passwordHash  String
  role          String    @default("user") // superadmin, admin, user, viewer
  orchestraId   String?
  orchestra     Orchestra? @relation(fields: [orchestraId], references: [id], onDelete: Cascade)
  active        Boolean   @default(true)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([orchestraId])
  @@index([username])
  @@index([email])
}

model SystemLog {
  id          String    @id @default(cuid())
  timestamp   DateTime  @default(now())
  level       String    // debug, info, warn, error
  category    String    // system, auth, email, request, test, error, api
  message     String
  metadata    Json?     // Additional structured data
  userId      String?   // User who triggered the action
  orchestraId String?   // Which orchestra context
  subdomain   String?   // Which subdomain
  ip          String?   // IP address for security logs
  userAgent   String?   // Browser info
  requestId   String?   // Correlation ID for tracking
  duration    Int?      // Duration in ms for performance logs
  
  @@index([timestamp])
  @@index([category])
  @@index([level])
  @@index([userId])
  @@index([orchestraId])
}

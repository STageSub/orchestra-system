generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Multi-tenant models
model Tenant {
  id                String    @id @default(cuid())
  name              String
  subdomain         String    @unique
  subscription      String    @default("trial") // trial, small_ensemble, medium_ensemble, institution
  maxMusicians      Int       @default(50)
  maxActiveProjects Int       @default(5)
  maxInstruments    Int       @default(10)
  databaseType      String    @default("shared") // shared or dedicated
  databaseUrl       String?   // Only for dedicated database
  logoUrl           String?
  primaryColor      String?
  stripeCustomerId  String?
  stripeSubscriptionId String?
  subscriptionStatus String   @default("trialing") // trialing, active, past_due, canceled
  trialEndsAt       DateTime?
  currentPeriodEnd  DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  users             User[]
  musicians         Musician[]
  instruments       Instrument[]
  positions         Position[]
  projects          Project[]
  rankingLists      RankingList[]
  emailTemplates    EmailTemplate[]
  settings          Settings[]
  auditLogs         AuditLog[]
  idSequences       IdSequence[]
  deletedIds        DeletedIds[]
  groupEmailLogs    GroupEmailLog[]
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String?
  name              String?
  role              String    @default("admin") // superadmin, admin, user
  tenantId          String?
  lastLoginAt       DateTime?
  emailVerified     DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  tenant            Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@index([tenantId])
}

model Musician {
  id               Int                     @id @default(autoincrement())
  musicianId       String                  @unique @default(cuid())
  firstName        String
  lastName         String
  email            String
  phone            String?
  preferredLanguage String?                @default("sv")
  localResidence   Boolean                 @default(false)
  notes            String?                 @db.Text
  isActive         Boolean                 @default(true)
  isArchived       Boolean                 @default(false)
  archivedAt       DateTime?
  restoredAt       DateTime?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  tenantId         String
  
  // Relations
  tenant           Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  qualifications   MusicianQualification[]
  rankings         Ranking[]
  requests         Request[]
  
  @@unique([email, tenantId])
  @@index([tenantId])
}

model Instrument {
  id           Int        @id @default(autoincrement())
  instrumentId String     @unique @default(cuid())
  name         String
  displayOrder Int?
  isArchived   Boolean    @default(false)
  archivedAt   DateTime?
  tenantId     String
  
  // Relations
  tenant       Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  positions    Position[]
  
  @@unique([name, tenantId])
  @@index([tenantId])
}

model Position {
  id             Int                     @id @default(autoincrement())
  positionId     String                  @unique @default(cuid())
  instrumentId   Int
  name           String
  hierarchyLevel Int
  tenantId       String
  
  // Relations
  tenant         Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  qualifications MusicianQualification[]
  instrument     Instrument              @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  projectNeeds   ProjectNeed[]
  rankingLists   RankingList[]

  @@unique([instrumentId, name])
  @@index([tenantId])
}

model MusicianQualification {
  musicianId Int
  positionId Int
  musician   Musician @relation(fields: [musicianId], references: [id])
  position   Position @relation(fields: [positionId], references: [id])

  @@id([musicianId, positionId])
}

model RankingList {
  id            Int           @id @default(autoincrement())
  rankingListId String        @unique @default(cuid())
  positionId    Int
  listType      String
  description   String?
  version       Int           @default(1)
  tenantId      String
  
  // Relations
  tenant        Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  projectNeeds  ProjectNeed[]
  rankings      Ranking[]
  position      Position      @relation(fields: [positionId], references: [id], onDelete: Cascade)

  @@unique([positionId, listType])
  @@index([tenantId])
}

model Ranking {
  id          Int         @id @default(autoincrement())
  rankingId   String      @unique @default(cuid())
  listId      Int
  musicianId  Int
  rank        Int
  rankingList RankingList @relation(fields: [listId], references: [id], onDelete: Cascade)
  musician    Musician    @relation(fields: [musicianId], references: [id])

  @@unique([listId, musicianId])
  @@unique([listId, rank])
}

model Project {
  id                Int              @id @default(autoincrement())
  projectId         String           @unique @default(cuid())
  name              String
  startDate         DateTime
  weekNumber        Int
  rehearsalSchedule String?
  concertInfo       String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  notes             String?
  tenantId          String
  
  // Relations
  tenant            Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  projectFiles      ProjectFile[]
  projectNeeds      ProjectNeed[]
  groupEmailLogs    GroupEmailLog[]
  
  @@index([tenantId])
}

model ProjectNeed {
  id                  Int           @id @default(autoincrement())
  projectNeedId       String        @unique @default(cuid())
  projectId           Int
  positionId          Int
  quantity            Int           @default(1)
  rankingListId       Int
  requestStrategy     String
  maxRecipients       Int?
  responseTimeHours   Int?          @default(24)
  requireLocalResidence Boolean     @default(false)
  archivedAt          DateTime?
  status              String        @default("active")
  projectFiles        ProjectFile[]
  position            Position      @relation(fields: [positionId], references: [id], onDelete: Cascade)
  project             Project       @relation(fields: [projectId], references: [id])
  rankingList         RankingList   @relation(fields: [rankingListId], references: [id], onDelete: Cascade)
  requests            Request[]
}

model Request {
  id                Int                @id @default(autoincrement())
  requestId         String             @unique @default(cuid())
  projectNeedId     Int
  musicianId        Int
  status            String             @default("pending")
  sentAt            DateTime           @default(now())
  reminderSentAt    DateTime?
  respondedAt       DateTime?
  response          String?
  confirmationSent  Boolean            @default(false)
  communicationLogs CommunicationLog[]
  musician          Musician           @relation(fields: [musicianId], references: [id])
  projectNeed       ProjectNeed        @relation(fields: [projectNeedId], references: [id], onDelete: Cascade)
  requestTokens     RequestToken[]
}

model RequestToken {
  token     String    @id @default(cuid())
  requestId Int
  createdAt DateTime  @default(now())
  expiresAt DateTime
  usedAt    DateTime?
  request   Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model EmailTemplate {
  id              Int      @id @default(autoincrement())
  emailTemplateId String   @unique @default(cuid())
  type            String
  subject         String
  body            String
  variables       Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tenantId        String
  
  // Relations
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@unique([type, tenantId])
  @@index([tenantId])
}

model CommunicationLog {
  id                 Int      @id @default(autoincrement())
  communicationLogId String   @unique @default(cuid())
  requestId          Int
  type               String
  timestamp          DateTime @default(now())
  emailContent       String?
  request            Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model ProjectFile {
  id               Int          @id @default(autoincrement())
  projectFileId    String       @unique @default(cuid())
  projectId        Int
  fileName         String
  originalFileName String?      // New: peter.pdf
  mimeType         String?      // New: application/pdf
  fileUrl          String
  fileType         String
  uploadedAt       DateTime     @default(now())
  projectNeedId    Int?
  sendTiming       String       @default("on_request")
  project          Project      @relation(fields: [projectId], references: [id])
  projectNeed      ProjectNeed? @relation(fields: [projectNeedId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  auditLogId String   @unique @default(cuid())
  userId     String?
  action     String
  entityType String
  entityId   Int
  oldValues  Json?
  newValues  Json?
  timestamp  DateTime @default(now())
  tenantId   String
  
  // Relations
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([entityType, entityId])
  @@index([timestamp])
  @@index([tenantId])
}

model IdSequence {
  id         Int      @id @default(autoincrement())
  entityType String
  lastNumber Int      @default(0)
  updatedAt  DateTime @updatedAt
  tenantId   String
  
  // Relations
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@unique([entityType, tenantId])
  @@index([tenantId])
}

model DeletedIds {
  id         Int      @id @default(autoincrement())
  entityType String
  deletedId  String
  deletedAt  DateTime @default(now())
  tenantId   String
  
  // Relations
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([entityType, deletedId, tenantId])
  @@index([entityType])
  @@index([tenantId])
}

model Settings {
  id          Int      @id @default(autoincrement())
  key         String
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenantId    String
  
  // Relations
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@unique([key, tenantId])
  @@index([tenantId])
}

model GroupEmailLog {
  id          Int      @id @default(autoincrement())
  projectId   Int?
  subject     String
  message     String
  recipients  Json     // Array of {email, name}
  sentCount   Int
  failedCount Int
  filters     Json?    // {instruments: [], positions: []}
  createdAt   DateTime @default(now())
  tenantId    String
  
  // Relations
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@index([tenantId])
}

// Central database schema for superadmin functionality
// This schema is completely separate from orchestra databases

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client-central"
}

datasource db {
  provider = "postgresql"
  url      = env("CENTRAL_DATABASE_URL")
}

// Core orchestra management
model Orchestra {
  id            String   @id @default(cuid())
  orchestraId   String   @unique // e.g., "GOT" for GÃ¶teborg
  name          String
  subdomain     String   @unique
  databaseUrl   String   // Encrypted
  status        String   @default("active") // active, suspended, cancelled
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  users         User[]
  metrics       OrchestraMetrics[]
  subscription  Subscription?
  billingHistory BillingHistory[]
  events        SystemEvent[]
  healthChecks  SystemHealth[]
}

// User management across orchestras
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  role          String   // superadmin, admin, user
  
  orchestraId   String?
  orchestra     Orchestra? @relation(fields: [orchestraId], references: [id])
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLoginAt   DateTime?
  
  @@index([orchestraId])
}

// Daily metrics from each orchestra
model OrchestraMetrics {
  id            String   @id @default(cuid())
  orchestraId   String
  orchestra     Orchestra @relation(fields: [orchestraId], references: [id])
  date          DateTime @default(now())
  
  // Daily metrics
  totalMusicians    Int
  activeMusicians   Int
  totalProjects     Int
  activeProjects    Int
  totalRequests     Int
  acceptedRequests  Int
  declinedRequests  Int
  pendingRequests   Int
  
  // Usage metrics
  emailsSent        Int
  storageUsedMB     Float
  apiCalls          Int
  
  createdAt     DateTime @default(now())
  
  @@unique([orchestraId, date])
  @@index([date])
}

// Subscription management
model Subscription {
  id            String   @id @default(cuid())
  orchestraId   String   @unique
  orchestra     Orchestra @relation(fields: [orchestraId], references: [id])
  
  plan          String   // small, medium, enterprise
  status        String   // trial, active, cancelled, suspended
  pricePerMonth Int
  currency      String   @default("SEK")
  
  trialEndsAt   DateTime?
  startedAt     DateTime @default(now())
  cancelledAt   DateTime?
  nextBillingAt DateTime?
  
  // Limits based on plan
  maxMusicians  Int
  maxProjects   Int
  maxRequests   Int
  maxStorageGB  Float
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Billing history
model BillingHistory {
  id            String   @id @default(cuid())
  orchestraId   String
  orchestra     Orchestra @relation(fields: [orchestraId], references: [id])
  
  amount        Float
  currency      String
  status        String   // paid, pending, failed
  invoiceUrl    String?
  
  billingPeriodStart DateTime
  billingPeriodEnd   DateTime
  paidAt        DateTime?
  createdAt     DateTime @default(now())
  
  @@index([orchestraId])
  @@index([status])
}

// System events and audit log
model SystemEvent {
  id            String   @id @default(cuid())
  orchestraId   String?
  orchestra     Orchestra? @relation(fields: [orchestraId], references: [id])
  
  type          String   // orchestra_created, subscription_changed, payment_received, error
  severity      String   // info, warning, error, critical
  title         String
  description   String?
  metadata      Json?
  
  createdAt     DateTime @default(now())
  
  @@index([type])
  @@index([severity])
  @@index([createdAt])
}

// Health monitoring
model SystemHealth {
  id            String   @id @default(cuid())
  orchestraId   String
  orchestra     Orchestra @relation(fields: [orchestraId], references: [id])
  
  timestamp     DateTime @default(now())
  isHealthy     Boolean
  responseTimeMs Int
  errorRate     Float
  
  // Health metrics
  databaseStatus String
  apiStatus      String
  emailStatus    String
  
  lastError     String?
  
  @@index([orchestraId, timestamp])
  @@index([isHealthy])
}
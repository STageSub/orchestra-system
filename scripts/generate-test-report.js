#!/usr/bin/env node

/**
 * Generate Test Report - Creates a comprehensive PDF report from stress test results
 */

const fs = require('fs')
const path = require('path')

// Simple HTML to PDF would require external dependencies
// For now, we'll generate a detailed markdown report that can be converted to PDF

function generateMarkdownReport(testResults) {
  const duration = (new Date(testResults.endTime || new Date()) - new Date(testResults.startTime)) / 1000
  const passRate = testResults.totalTests > 0 
    ? (testResults.passed / testResults.totalTests * 100).toFixed(1)
    : 0

  let report = `# Orchestra System - Ultimate Stress Test Report

**Generated:** ${new Date().toLocaleString('sv-SE')}  
**Duration:** ${duration.toFixed(2)} seconds  
**Environment:** Production Dummy Data (151 musicians, 17 instruments, 41 positions)

---

## Executive Summary

- **Total Tests:** ${testResults.totalTests}
- **Passed:** ${testResults.passed} (${passRate}%)
- **Failed:** ${testResults.failed}
- **Warnings:** ${testResults.warnings}
- **Overall Status:** ${testResults.failed === 0 ? '‚úÖ PASSED' : '‚ö†Ô∏è FAILED'}

## Test Categories

`

  // Category results
  Object.entries(testResults.categories || {}).forEach(([category, results]) => {
    const catPassRate = results.tests.length > 0
      ? (results.passed / results.tests.length * 100).toFixed(0)
      : 0
    
    report += `### ${category} (${catPassRate}% Pass Rate)

| Test | Status | Duration | Details |
|------|--------|----------|---------|
`
    
    results.tests.forEach(test => {
      const status = test.passed ? '‚úÖ Passed' : '‚ùå Failed'
      const duration = test.duration ? `${test.duration}ms` : 'N/A'
      const details = test.details ? Object.entries(test.details)
        .map(([k, v]) => `${k}: ${JSON.stringify(v)}`)
        .join('<br>') : ''
      
      report += `| ${test.name} | ${status} | ${duration} | ${details} |\n`
    })
    
    report += '\n'
  })

  // Email statistics
  if (testResults.emailStats) {
    report += `## Email Statistics

- **Total Emails Sent:** ${testResults.emailStats.total || 0}
- **By Type:**
`
    Object.entries(testResults.emailStats.byType || {}).forEach(([type, count]) => {
      report += `  - ${type}: ${count}\n`
    })
    report += `- **With Attachments:** ${testResults.emailStats.withAttachments || 0}\n\n`
  }

  // Performance metrics
  if (testResults.performance) {
    report += `## Performance Metrics

| Operation | Duration | Status |
|-----------|----------|--------|
`
    Object.entries(testResults.performance).forEach(([operation, perf]) => {
      const status = perf.duration < 1000 ? '‚úÖ Good' : perf.duration < 5000 ? '‚ö†Ô∏è OK' : '‚ùå Slow'
      report += `| ${operation} | ${perf.duration}ms | ${status} |\n`
    })
    report += '\n'
  }

  // Errors
  if (testResults.errors && testResults.errors.length > 0) {
    report += `## Errors

| Category | Test | Error |
|----------|------|-------|
`
    testResults.errors.forEach(error => {
      report += `| ${error.category} | ${error.test} | ${error.error} |\n`
    })
    report += '\n'
  }

  // Recommendations
  report += `## Recommendations

Based on the test results:

`
  
  if (testResults.failed === 0) {
    report += `1. ‚úÖ **System is performing well** - All tests passed successfully
2. **Email system** is handling all scenarios correctly
3. **Request strategies** are working as designed
4. **Performance** is within acceptable limits

### Next Steps:
- Continue monitoring system performance
- Consider load testing with even larger datasets
- Review any warnings for potential improvements
`
  } else {
    report += `1. ‚ö†Ô∏è **Address failing tests** - ${testResults.failed} tests need attention
2. Review error logs for root causes
3. Consider performance optimization for slow operations
4. Rerun tests after fixes

### Priority Issues:
`
    testResults.errors?.slice(0, 5).forEach((error, i) => {
      report += `${i + 1}. Fix ${error.category} - ${error.test}\n`
    })
  }

  // Test data summary
  report += `

## Test Data Summary

### Musicians (151 total)
- Active: 143 (95%)
- Inactive: 8 (5%)
- Archived: 15
- Singers: 20 (Sopran: 5, Alt: 5, Tenor: 5, Bas: 5)

### Instruments (17 total)
Strings, Woodwinds, Brass, Percussion, Keyboard, Voice

### Positions (41 total)
Including all orchestral positions plus 4 voice types

### Projects (25 total)
- Completed: 10 (100% staffed)
- Upcoming: 15 (various request strategies)

---

*Report generated by Orchestra System Stress Test Suite*`

  return report
}

// Main function
async function main() {
  // Try to read from latest.json first
  const latestPath = path.join(__dirname, 'test-results', 'json', 'latest.json')
  let testResults
  
  if (fs.existsSync(latestPath)) {
    console.log(`üìÑ Generating report from: latest.json`)
    testResults = JSON.parse(fs.readFileSync(latestPath, 'utf8'))
  } else {
    // Fallback to finding most recent in json folder
    const jsonDir = path.join(__dirname, 'test-results', 'json')
    if (!fs.existsSync(jsonDir)) {
      console.error('No test results folder found. Run ultimate-system-stress-test.js first.')
      process.exit(1)
    }
    
    const files = fs.readdirSync(jsonDir)
      .filter(f => f.startsWith('stress-test-') && f.endsWith('.json'))
      .sort((a, b) => b.localeCompare(a))
    
    if (files.length === 0) {
      console.error('No stress test reports found. Run ultimate-system-stress-test.js first.')
      process.exit(1)
    }
    
    const latestReport = files[0]
    console.log(`üìÑ Generating report from: ${latestReport}`)
    testResults = JSON.parse(fs.readFileSync(path.join(jsonDir, latestReport), 'utf8'))
  }
  
  try {
    const markdownReport = generateMarkdownReport(testResults)
    
    const timestamp = Date.now()
    const reportFileName = `stress-test-${timestamp}.md`
    const mdPath = path.join(__dirname, 'test-results', 'markdown', reportFileName)
    fs.writeFileSync(mdPath, markdownReport)
    
    // Also save as latest.md
    const latestMdPath = path.join(__dirname, 'test-results', 'markdown', 'latest.md')
    fs.writeFileSync(latestMdPath, markdownReport)
    
    console.log(`‚úÖ Report generated: test-results/markdown/${reportFileName}`)
    console.log(`‚úÖ Also saved as: test-results/markdown/latest.md`)
    console.log('\nüìå To convert to PDF:')
    console.log('   1. Open the .md file in VS Code')
    console.log('   2. Install "Markdown PDF" extension')
    console.log('   3. Right-click and select "Markdown PDF: Export (pdf)"')
    console.log('\n   Or use pandoc:')
    console.log(`   pandoc ${mdPath} -o test-results/markdown/stress-test-report.pdf`)
    
  } catch (error) {
    console.error('‚ùå Error generating report:', error.message)
    process.exit(1)
  }
}

if (require.main === module) {
  main()
}